<?php

namespace Polcode\UnitConverterBundle\Test\Structures;

use Polcode\UnitConverterBundle\Factory\ValueUnitFactory;
use Polcode\UnitConverterBundle\UnitsRepository\UnitsRepository;
use Polcode\UnitConverterBundle\Tests\UnitsRepository\BasicUnitsProviderMock;
use Polcode\UnitConverterBundle\Tests\UnitsRepository\MoneyProviderMock;
/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-11-25 at 09:57:36.
 */
class ValueUnitFactoryTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var ValueUnitFactory
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $unitRepository = new UnitsRepository(array(new BasicUnitsProviderMock(), new MoneyProviderMock()));
        $this->object = new ValueUnitFactory($unitRepository);
    }

    /**
     * @covers Polcode\UnitConverterBundle\Structures\UnitFactory::createValue
     */
    public function testCreateValue() {
        $unitValue = $this->object->createValue(10.58, 'cm');
        $this->assertEquals(10.58, $unitValue->getValue());
        $this->assertEquals('cm', $unitValue->getUnit()->getSymbol());
        $this->assertEquals(0.01, $unitValue->getUnit()->getConversionMethod()->calculateValueToStandardUnit(1));
        $this->assertTrue($unitValue->getUnit()->hasSynonym('centimetre'));
        
    }
    
    /**
     * @expectedException InvalidArgumentException
     */
    public function testCreateValue_throwsExceptionWhenUnknowUnit() {
        $this->object->createValue(10.58, 'wrongUnit');
    }

}
