<?php

namespace Polcode\UnitConverterBundle\Tests;

use Polcode\UnitConverterBundle\Converter;
use Polcode\UnitConverterBundle\Factory\ValueUnitFactory;
use Polcode\UnitConverterBundle\UnitsRepository\UnitsRepository;
use Polcode\UnitConverterBundle\Structures\Unit;
use Polcode\UnitConverterBundle\Tests\UnitsRepository\BasicUnitsProviderMock;
use Polcode\UnitConverterBundle\Tests\UnitsRepository\MoneyProviderMock;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-11-25 at 11:04:25.
 */
class ConverterTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var UnitsRepository
     */
    private $unitRepository;

    /**
     * @var ValueUnitFactory
     */
    private $valueFactory;

    /**
     * @var Unit
     */
    private $value100cm;
    
    /**
     * @var Converter
     */
    private $converter;

    public function setUp() {
        $this->unitRepository = new UnitsRepository(
                array(new BasicUnitsProviderMock(), new MoneyProviderMock())
        );
        
        $this->valueFactory = new ValueUnitFactory($this->unitRepository);
        $this->converter = new Converter($this->unitRepository);
        
        $this->value100cm = $this->valueFactory->createValue(100, 'cm');
    }

    /**
     * @covers Polcode\UnitConverterBundle\Converter::convertValueToUnit
     */
    public function testConvertValueToUnit_centimetresToMetres() {

        $meters = $this->converter->convertValueToUnit($this->value100cm, 'm');
        $this->assertEquals(1, $meters->getValue());
        $this->assertEquals('m', $meters->getUnit()->getSymbol());
    }

    /**
     * @covers Polcode\UnitConverterBundle\Converter::convertValueToUnit
     */
    public function testConvertValueToUnit_centimetresToKilometres() {

        $kilometers = $this->converter->convertValueToUnit($this->value100cm, 'kilometers');
        $this->assertEquals(0.001, $kilometers->getValue());
        $this->assertEquals('km', $kilometers->getUnit()->getSymbol());
    }

    /**
     * @covers Polcode\UnitConverterBundle\Converter::convertValueToUnit
     */
    public function testConvertValueToUnit_centimetresToCentimetres() {

        $centimeters = $this->converter->convertValueToUnit($this->value100cm, 'cm');
        $this->assertEquals(100, $centimeters->getValue());
        $this->assertEquals('cm', $centimeters->getUnit()->getSymbol());
    }
    
    /**
     * @covers Polcode\UnitConverterBundle\Converter::convertValueToUnit
     */
    public function testConvertValueToUnit_dolarsToPounts() {

        $value100dolars = $this->valueFactory->createValue(100, '$');
        $pounts = $this->converter->convertValueToUnit($value100dolars, '£');
        $this->assertEquals(63.78, round($pounts->getValue(),2));
        $this->assertEquals('£', $pounts->getUnit()->getSymbol());
    }

    /**
     * @expectedException InvalidArgumentException
     */
    public function testConvertValueToUnit_throwsExceptionWhenUnknowUnit() {
        $this->converter->convertValueToUnit($this->value100cm, 'wrongUnit');
    }
    
    /**
     * @expectedException InvalidArgumentException
     */
    public function testConvertValueToUnit_throwsExceptionWhenDiffrentCategory() {
        $this->converter->convertValueToUnit($this->value100cm, '$');
    }
}
